#### 파이썬 스타일가이드
"""
이것은 여러줄에 걸친 주석을 만드는 코드
"""

# 한 줄 주석은 #으로 표현한다. 
# python 코드는 1줄에 1문장이 원칙이다. 
# 문장은 파이썬이 실행가능한 최소한의 코드 단위이다. 
# 기본적으로 파이썬에선 ;을 사용하지 않는다. 
# 한줄로 표기할때는 ;을 작성하여 표기할 수 있다. 
print("world") ; print("hi") #하지만 이 방법은 잘 사용하지 않는다. 

# 여러 줄을 작성할 때는 역슬래시를 사용 
print("hello \
    world")
## PEP-8 가이드에 따르면 여러줄 문자열은 아래와 같이 쓰는 게 관례(convention)이다. 
print("""hello
world""") # 이렇게 해야할 경우 엔터까지 포함 

# [] {} ()는 \ 없이도 가능하다. 
# 점심메뉴에 대해 lunch를 사용하여 list를 만들어보자. 
lunch = [
    '짜장면', '짬뽕', '물만두',
    '군만두', '물만두', '왕만두'
]
print(lunch[0]) #리스트 중 0번째, 즉 처음 값을 받아온다. 

#### 할당 연산자 
# 변수는 =을 통해 할당된다. 해당 데이터 타입을 확인하기 위해서는 type()을 활용한다. 
# 해당 값의 메모리 주소를 확인하기 위해서는 id()를 활용한다. 
x = 'hello'
print(type(x)) #string임을 알 수 있다. 
print(id(x)) # 2173071197040

# 같은 값을 동시에 할당할 수 있다. 
x = y = 1000 
print(x,y)

# 다른 값을 동시에 할당할 수 있다. 
x,y = 1,2 # 튜플이라는 형태로 만들어 넣어주는 것 
c = 10
d = 20 
c, d = d, c # 왼쪽은 c,d라는 변수가 담긴 튜플이며, 오른쪽은 d,c가 담긴 튜플 c의 값은 d로, d의 값은 c로 동시에 처리됨. 
print(c,d) 

# 리스트와 튜플의 차이점 : 리스트는 []로 작성, 튜플을 ()로 작성, 리스트는 값을 수정할 수 있지만 튜플은 값을 변경할 수 없다. 
# 가장 큰 차이점은 값을 변경할 수 있는가의 여부이며, 프로그램이 실행되는 동안 그 값이 변경되면 안 되는 경우에는 튜플을 사용하면 된다. 
# 리스트 
a = [1,2,3,4,5]
# 리스트 인덱싱 (문자열 인덱싱은 문자열에서 꼭 알고 넘어가야 하는 개념이다. 인덱싱은 무엇을 가리킨다의 의미로, 이것을 이용하여 특정한 문자를 뽑아내는 것을 의미한다.)
# 앞에서 카운트는 0부터, 뒤에서 카운트는 -1부터 
# 문자열 슬라이싱 
# [이상:미만:간격]
print(a[0:3:]) # a의 0번째부터 3번째까지 간격 없이 출력해라 
print(a[::2]) # a의 처음부터 끝까지 2 간격으로 출력 

#### 식별자 
# 파이썬에서 식별자는 변수, 함수, 모듈, 클래스 등을 식별하는데 사용되는 이름이다. 
# 식별자의 이름은 영문알파벳 숫자로 구성되며, 첫 글자에 숫자가 올 수 없다. 길이에 제한이 없다. 대소문자를 구별한다. 
import keyword
print(keyword.kwlist)

#### 데이터 타입 
# (1) int (정수) type : 모든 정수는 int로 표현된다. 
a = 2** 64 
print(a)
print(type(a))
# 파이썬에서는 가장 큰 숫자를 활용하기 위해 sys 모듈을 불러온다. 파이썬은 기존 c계열 프로그래밍 언어와 다르게 정수 자료형에서 오버플로우(데이터타입 별로 사용할 수 있는 메모리의 크기가 제한되어 있다.)가 없다. 
import sys 
max_int = sys.maxsize
print(max_int)
# (2) float(부동소수점, 실수) :실수는 float로 표현
a = 3.5
print(type(a))
# e를 사용할 수 있다. 
b = 314e-2
print(type(b))
print(3.5 - 3.12) #실수의 연산을 조심할 필요가 있다. 
print(round(3.5-3.12,2))
# 해결방법 중 하나 
a = 3.5 - 3.12 
b = 0.38 
# math.isclose() 를 이용해서 a와 b의 값이 같은지 확인할수 있습니다.
import math
print(math.isclose(a, b))
# (3) complex(복소수)
a = 3-4j
print(type(a))
# (4) 문자열 타입은 '' 또는 ""로 표현 가능하다. 
# 문자열 안에 문장분호가 사용된 경우, 이스케이프 문자를 활용 가능하다.  
print('철수가 말했다. \'안녕?\'')
# f-string 사용방법 
a = 65
b = 180
c = '박민선'
print(f'멋쟁이 {c}씨는 나이{a}세에 키는 {b}cm입니다.')
print("""
여러줄을
출력해봅시다.
""")
# 이스케이프 시퀀스 
# \n : 줄 바꿈 \t: 탭 
